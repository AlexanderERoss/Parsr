"line","is_different_style","is_font_bigger","different_color","is_font_unique","text_case","word_count","is_number","nb_of_verbs","nb_of_nouns","nb_of_cardinal_numbers","label"
"Trace-based Just-in-Time Type Specialization for Dynamic","0","1","0","1","2","6","0","1","2","0","heading"
"Languages","0","1","0","1","2","1","0","0","1","0","heading"
"Andreas Gal∗+, Brendan Eich∗, Mike Shaver∗, David Anderson∗, David Mandelin∗,","0","1","0","1","2","10","0","0","2","0","paragraph"
"Mohammad R. Haghighat$, Blake Kaplan∗, Graydon Hoare∗, Boris Zbarsky∗, Jason Orendorff∗,","0","1","0","1","2","11","0","0","5","0","paragraph"
"Jesse Ruderman∗, Edwin Smith#, Rick Reitmaier#, Michael Bebenita+, Mason Chang+#, Michael Franz+","0","1","0","1","2","12","0","0","5","0","paragraph"
"Mozilla Corporation∗","0","0","0","1","2","2","0","0","1","0","paragraph"
"{gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman}@mozilla.com","0","0","0","1","0","1","0","0","1","0","paragraph"
"Adobe Corporation#","0","0","0","1","2","2","0","0","2","0","paragraph"
"{edwsmith,rreitmai}@adobe.com","0","0","0","1","0","1","0","0","0","0","paragraph"
"Intel Corporation$","0","0","0","1","2","2","0","0","1","0","paragraph"
"{mohammad.r.haghighat}@intel.com","0","0","0","1","0","1","0","0","1","0","paragraph"
"University of California, Irvine+","0","0","0","1","2","4","0","0","2","0","paragraph"
"{mbebenit,changm,franz}@uci.edu","0","0","0","1","0","1","0","0","1","0","paragraph"
"Abstract","0","1","0","1","2","1","0","0","1","0","heading"
"Dynamic languages such as JavaScript are more difﬁcult to com-","0","0","0","1","3","10","0","0","3","0","paragraph"
"pile than statically typed ones. Since no concrete type information","0","0","0","1","3","10","0","1","3","0","paragraph"
"isavailable,traditionalcompilersneedtoemitgenericcodethatcan","0","0","0","1","0","1","0","0","0","0","paragraph"
"handle all possible type combinations at runtime. We present an al-","0","0","0","1","3","11","0","2","3","0","paragraph"
"ternative compilation technique for dynamically-typed languages","0","0","0","1","0","6","0","1","2","0","paragraph"
"that identiﬁes frequently executed loop traces at run-time and then","0","0","0","1","0","10","0","1","3","0","paragraph"
"generates machine code on the ﬂy that is specialized for the ac-","0","0","0","1","0","12","0","1","4","0","paragraph"
"tual dynamic types occurring on each path through the loop. Our","0","0","0","1","3","11","0","1","3","0","paragraph"
"method provides cheap inter-procedural type specialization, and an","0","0","0","1","0","8","0","1","2","0","paragraph"
"elegant and efﬁcient way of incrementally compiling lazily discov-","0","0","0","1","0","9","0","1","1","0","paragraph"
"ered alternative paths through nested loops. We have implemented","0","0","0","1","3","9","0","2","3","0","paragraph"
"a dynamic compiler for JavaScript based on our technique and we","0","0","0","1","3","11","0","1","4","0","paragraph"
"have measured speedups of 10x and more for certain benchmark","0","0","0","1","0","10","0","1","3","0","paragraph"
"programs.","0","0","0","1","0","1","0","0","1","0","paragraph"
"Categories and Subject Descriptors D.3.4 [Programming Lan-","0","0","0","0","3","7","0","0","4","0","paragraph"
"guages]: Processors — Incremental compilers, code generation.","0","0","0","0","3","7","0","0","4","0","paragraph"
"General Terms Design, Experimentation, Measurement, Perfor-","0","0","0","0","2","6","0","0","3","0","paragraph"
"mance.","0","0","0","1","0","1","0","0","1","0","paragraph"
"Keywords JavaScript, just-in-time compilation, trace trees.","0","0","0","0","3","6","0","0","3","0","paragraph"
"1. Introduction","0","1","0","1","2","2","0","0","1","1","heading"
"Dynamic languages such as JavaScript, Python, and Ruby, are pop-","0","0","0","0","3","10","0","0","4","0","paragraph"
"ular since they are expressive, accessible to non-experts, and make","0","0","0","1","0","10","0","1","2","0","paragraph"
"deployment as easy as distributing a source ﬁle. They are used for","0","0","0","1","3","12","0","2","3","0","paragraph"
"small scripts as well as for complex applications. JavaScript, for","0","0","0","1","3","10","0","0","3","0","paragraph"
"example, is the de facto standard for client-side web programming","0","0","0","1","0","10","0","0","2","0","paragraph"
"Permission to make digital or hard copies of all or part of this work for personal or","0","0","0","1","3","17","0","1","4","0","paragraph"
"classroom use is granted without fee provided that copies are not made or distributed","0","0","0","1","0","14","0","4","3","0","paragraph"
"for proﬁt or commercial advantage and that copies bear this notice and the full citation","0","0","0","1","0","15","0","1","5","0","paragraph"
"on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute","0","0","0","1","3","16","0","4","2","0","paragraph"
"to lists, requires prior speciﬁc permission and/or a fee.","0","0","0","1","0","9","0","1","3","0","paragraph"
"PLDI’09, June 15–20, 2009, Dublin, Ireland.","0","0","0","0","2","6","0","0","1","0","paragraph"
"Copyright c? 2009 ACM 978-1-60558-392-1/09/06...$5.00","0","0","0","1","2","5","0","0","2","0","paragraph"
"and is used for the application logic of browser-based productivity","0","0","0","1","0","10","0","2","2","0","paragraph"
"applications such as Google Mail, Google Docs and Zimbra Col-","0","0","0","1","3","10","0","0","4","0","paragraph"
"laboration Suite. In this domain, in order to provide a ﬂuid user","0","0","0","1","3","12","0","1","4","0","paragraph"
"experience and enable a new generation of applications, virtual ma-","0","0","0","1","0","10","0","1","4","0","paragraph"
"chines must provide a low startup time and high performance.","0","0","0","1","0","10","0","2","3","0","paragraph"
"Compilers for statically typed languages rely on type informa-","0","0","0","1","3","9","0","2","3","0","paragraph"
"tion to generate efﬁcient machine code. In a dynamically typed pro-","0","0","0","1","3","11","0","2","2","0","paragraph"
"gramming language such as JavaScript, the types of expressions","0","0","0","1","3","9","0","1","4","0","paragraph"
"may vary at runtime. This means that the compiler can no longer","0","0","0","1","3","12","0","4","2","0","paragraph"
"easily transform operations into machine instructions that operate","0","0","0","1","0","8","0","2","2","0","paragraph"
"on one speciﬁc type. Without exact type information, the compiler","0","0","0","1","3","10","0","0","2","1","paragraph"
"must emit slower generalized machine code that can deal with all","0","0","0","1","0","11","0","5","1","0","paragraph"
"potential type combinations. While compile-time static type infer-","0","0","0","1","3","8","0","0","2","0","paragraph"
"ence might be able to gather type information to generate opti-","0","0","0","1","0","11","0","3","2","0","paragraph"
"mized machine code, traditional static analysis is very expensive","0","0","0","1","0","9","0","0","2","0","paragraph"
"and hence not well suited for the highly interactive environment of","0","0","0","1","0","11","0","0","1","0","paragraph"
"a web browser.","0","0","0","1","0","3","0","0","1","0","paragraph"
"We present a trace-based compilation technique for dynamic","0","0","0","1","3","8","0","2","2","0","paragraph"
"languages that reconciles speed of compilation with excellent per-","0","0","0","1","0","9","0","1","3","0","paragraph"
"formance of the generated machine code. Our system uses a mixed-","0","0","0","1","3","11","0","2","4","0","paragraph"
"mode execution approach: the system starts running JavaScript in a","0","0","0","1","3","10","0","2","3","0","paragraph"
"fast-starting bytecode interpreter. As the program runs, the system","0","0","0","1","3","9","0","2","2","0","paragraph"
"identiﬁes hot (frequently executed) bytecode sequences, records","0","0","0","0","0","7","0","1","1","0","paragraph"
"them, and compiles them to fast native code. We call such a se-","0","0","0","1","3","13","0","3","5","0","paragraph"
"quence of instructions a trace.","0","0","0","0","0","5","0","0","2","0","paragraph"
"Unlike method-based dynamic compilers, our dynamic com-","0","0","0","1","3","7","0","1","1","0","paragraph"
"piler operates at the granularity of individual loops. This design","0","0","0","1","3","10","0","1","4","0","paragraph"
"choice is based on the expectation that programs spend most of","0","0","0","1","0","11","0","2","3","0","paragraph"
"their time in hot loops. Even in dynamically typed languages, we","0","0","0","1","3","11","0","1","4","0","paragraph"
"expect hot loops to be mostly type-stable, meaning that the types of","0","0","0","0","0","12","0","2","1","0","paragraph"
"values are invariant. (12) For example, we would expect loop coun-","0","0","0","1","3","11","0","2","4","1","paragraph"
"ters that start as integers to remain integers for all iterations. When","0","0","0","1","3","12","0","2","4","0","paragraph"
"both of these expectations hold, a trace-based compiler can cover","0","0","0","1","0","10","0","4","2","0","paragraph"
"the program execution with a small number of type-specialized, ef-","0","0","0","1","0","10","0","0","2","0","paragraph"
"ﬁciently compiled traces.","0","0","0","1","0","3","0","1","1","0","paragraph"
"Each compiled trace covers one path through the program with","0","0","0","1","3","10","0","2","3","1","paragraph"
"one mapping of values to types. When the VM executes a compiled","0","0","0","1","3","12","0","2","4","1","paragraph"
"trace, it cannot guarantee that the same path will be followed","0","0","0","1","0","11","0","4","2","0","paragraph"
"or that the same types will occur in subsequent loop iterations.","0","0","0","1","0","11","0","2","2","0","paragraph"
